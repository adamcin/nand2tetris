// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // D register
        And(a=instruction[15], b=instruction[4], out=loadD);
        DRegister(in=ird, load=loadD, out=ord);

        // ALU
        ALU(x=ord, y=aluy, out=outM, out=ird, out=aluToA, ng=ng, zr=zr, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6]);
        // writeM
        And(a=instruction[15], b=instruction[3], out=writeM);

        // C comp with A dest
        And(a=instruction[15], b=instruction[5], out=selra);
        Mux16(a=instruction, b=aluToA, sel=selra, out=ira);

        // A register
        Not(in=instruction[15], out=directA);
        Or(out=loadA, a=directA, b=selra);
        ARegister(in=ira, load=loadA, out[0..14]=addressM, out=ora, out=jmpTo);
        // select A or inM for aluy
        And(a=instruction[15], b=instruction[12], out=selaluy);
        Mux16(a=ora, b=inM, sel=selaluy, out=aluy);

        // Program Counter
        Or(a=zr, b=ng, out=notPos);
        Not(in=notPos, out=pos);
        And(a=instruction[2], b=ng, out=jmpLT);
        And(a=instruction[1], b=zr, out=jmpEQ);
        And(a=instruction[0], b=pos, out=jmpGT);
        Or(a=jmpLT, b=jmpEQ, out=jmpLE);
        Or(a=jmpLE, b=jmpGT, out=jmpSet);
        And(a=instruction[15], b=jmpSet, out=jmpIf);
        PC(reset=reset, load=jmpIf, inc=true, in=jmpTo, out[0..14]=pc);
}